INSIGHTS

Always read the question statements correctly with patience 2 times

Note:

"ternary operator returns result you cannot print result untill you save it in 
mem location or either place cout outside where the value is reutrned"

cout<<((c=='Y')?"YES":"NO")<<endl;

you could always put an empty string in array of string to keep it simple when u access the array idx

"best comparision logic simple elegant"
  cout << ((a > b ? a : b) > (c > d ? c : d) ? (a > b ? a : b) : (c > d ? c : d));


print the string to stdout (https://en.wikipedia.org/wiki/Standard_streams#Standard_output_.28stdout.29).
The more popular command form is cout. It has the following basic form:
cout<<value_to_print<<value_to_print;
Any number of values can be printed using one command as shown.
The printf command comes from C language. It accepts an optional format specification and a list of variables. Two examples for printing a string are:
printf("%s", string); printf(string);
Note that neither method adds a newline. It only prints what you tell it to.

Some C++ data types, their format specifiers, and their most common bit widths are as follows:

* Int ("%d"): 32 Bit integer
* Long ("%ld"): 64 bit integer
* Char ("%c"): Character type
* Float ("%f"): 32 bit real value
* Double ("%lf"): 64 bit real value

*Reading*
To read a data type, use the following syntax:

scanf("`format_specifier`", &val)

For example, to read a character followed by a double:

char ch;
double d;
scanf("%c %lf", &ch, &d);

For the moment, we can ignore the spacing between format specifiers.
*Printing*
To print a data type, use the following syntax:

printf("`format_specifier`", val)

For example, to print a character followed by a double:

char ch = 'd';
double d = 234.432;
printf("%c %lf", ch, d);

*Note:* You can also use cin and cout instead of scanf and printf; however, if you are taking a million numbers as input and printing a million lines, it is faster to use scanf and printf.


https://www.geeksforgeeks.org/precision-of-floating-point-numbers-in-c-floor-ceil-trunc-round-and-setprecision/

cout << fixed << setprecision(9) << e << "\n"; // prints upto 9 decimal values of e
cout << setprecision(9) << e << "\n"; // prints total 9 digits in e including all digits


array curly ends with ; aways


















































